/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.demo.api.taskmanagement.swagger.api;

import com.demo.api.taskmanagement.swagger.model.Task;
import com.demo.api.taskmanagement.swagger.model.TaskResponse;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-01T11:45:26.088+03:00")

@Api(value = "task", description = "the task API")
public interface TaskApi {

    @ApiOperation(value = "Create a new task", notes = "", response = TaskResponse.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the list of policy documents of a given policy number", response = TaskResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Void.class) })
    
    @RequestMapping(value = "/task",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TaskResponse> addTask(@ApiParam(value = "Task object to create" ,required=true )  @Valid @RequestBody Task taskBody) {
        // do some magic!
        return new ResponseEntity<TaskResponse>(HttpStatus.OK);
    }


    @ApiOperation(value = "Deletes a task", notes = "", response = TaskResponse.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the list of policy documents of a given policy number", response = TaskResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Task not found", response = Void.class) })
    
    @RequestMapping(value = "/task",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<TaskResponse> deleteTask(@ApiParam(value = "Task id to delete",required=true ) @PathVariable("taskId") Long taskId) {
        // do some magic!
        return new ResponseEntity<TaskResponse>(HttpStatus.OK);
    }


    @ApiOperation(value = "Find task by ID", notes = "Multiple status values can be provided with comma separated strings", response = TaskResponse.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the list of policy documents of a given policy number", response = TaskResponse.class),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/task",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TaskResponse> findTaskById( @NotNull@ApiParam(value = "Status values that need to be considered for filter", required = true) @RequestParam(value = "id", required = true) Long id) {
        // do some magic!
        return new ResponseEntity<TaskResponse>(HttpStatus.OK);
    }


    @ApiOperation(value = "Update an existing task", notes = "", response = TaskResponse.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the list of policy documents of a given policy number", response = TaskResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Task not found", response = Void.class) })
    
    @RequestMapping(value = "/task",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<TaskResponse> updateTask(@ApiParam(value = "Task object to be updated" ,required=true )  @Valid @RequestBody Task body) {
        // do some magic!
        return new ResponseEntity<TaskResponse>(HttpStatus.OK);
    }

}
